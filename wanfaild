#!/usr/bin/perl
#
# wanfaild - Monitor WAN links and provide failover
#
# Copyright (C) 2010 Steven Pritchard <steve@kspei.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

our $NAME="wanfaild";
our $VERSION='0.05';

=head1 NAME

wanfaild - Monitor WAN links and provide failover

=head1 DESCRIPTION

B<wanfaild> will monitor one or more WAN links and provide failover
support.

=cut

use strict;
use warnings;

use YAML::Tiny;
use Getopt::Long;
use Pod::Usage;
use Sys::Syslog qw(:standard :macros);
use Net::Ping;
use Socket;
use List::Util qw(shuffle);
use FileHandle;
use POSIX qw(:sys_wait_h);
use Math::BigInt try => 'GMP';
use Proc::Daemon;

sub print_version();
sub load_config($);
sub ping($@);
sub _connect($@);
sub linkstatus($);
sub logger(@);
sub writepid($);
sub cleanup();
sub trap_signals();
sub hup();
sub notify($$$);
sub prenotify();
sub check_status();
sub ping_test($);
sub connect_test($);
sub gwping($);
sub calc_sleeptime($);
sub route_add($$);
sub route_del($$);
sub my_system(@);
sub ip_cached($);
sub gateway($);
sub autogw($);

=head1 SYNOPSIS

wanfaild [options]

 Options:
   --conf       -c      Specify configuration file
   --no-daemon  -D      Don't detach and become a daemon
   --one-shot   -1      Run once, then exit
   --help       -h      Help message

 Long options:
   --version            Print the version number

=cut

# We store up/down state information here.
our %status=();

# And last checked time here.
our %checktime=();

# Cache DNS lookups.
our %ipcache=();

# Cache default routes.
our %gwcache=();

# Store $0 and @ARGV for later (before GetOptions() changes @ARGV).
our @args=($0, @ARGV);

my $configfile="/etc/wanfaild.yml";
my $help=0;
my $nodaemon=0;
my $oneshot=0;

GetOptions(
    'conf|c=s'          => \$configfile,
    'no-daemon|D'       => \$nodaemon,
    'one-shot|1'        => \$oneshot,
    'help|h'            => \$help,
    'version'           => \&print_version,
) or pod2usage({ -exitval => 1, -verbose => 0 });

pod2usage({ -exitval => 0, -verbose => 1 }) if ($help);

# Load the config file.
our %conf=load_config($configfile);

# Set defaults.
$conf{'interval'}=30 unless exists($conf{'interval'});
$conf{'syslog'}=1 unless exists($conf{'syslog'});
$conf{'pidfile'}="/var/run/$NAME.pid" unless $conf{'pidfile'};
$conf{'mailfrom'}='root@localhost' unless $conf{'mailfrom'};
$conf{'admin'}='root@localhost' unless $conf{'admin'};
$conf{'mailhost'}='localhost' unless $conf{'mailhost'};

die "At least one interface must be defined.\n"
    unless (exists($conf{'interface'}) and keys(%{$conf{'interface'}}));

$oneshot=1 if ($conf{'interval'} == 0);
$nodaemon=1 if ($oneshot);

# Become a daemon.
Proc::Daemon::Init unless $nodaemon;

# Set up some environment variables for later notifications.
prenotify();

# Prepare to log to syslog.
if ($conf{'syslog'}) {
    if (!openlog($NAME, "nofatal,pid", LOG_DAEMON)) {
        warn "openlog() failed, syslog logging disabled: $!\n";
        $conf{'syslog'}=0;
    }
}

# Write a PID file.
our $pidfile=$conf{'pidfile'};
$pidfile=undef unless (writepid($pidfile));

prenotify();
trap_signals();

## FIXME - Just for testing
#use Data::Dumper;
##print STDERR Dumper(\%ENV), "\n";
#print STDERR Dumper(\%conf), "\n";

# Interval between polls, with a minimum of 5 seconds.
our $sleeptime=calc_sleeptime(5);
#logger "Sleeping $sleeptime seconds between polls.";

# Signal says we're done.
our $done=0;

# Signal says it's time to check status.
our $testing=0;
our $alarm=0;

check_status();

# If this is a one-shot run, we're done.
if ($oneshot) {
    cleanup();
    exit 0;
}

# Otherwise, start to loop.
alarm($sleeptime);

while ($done == 0) {
    # Wait for signals.
    POSIX::pause();

    #logger "Woke up!";

    if ($alarm) {
        check_status();
        $alarm=0;
        alarm($sleeptime);
    }
}

cleanup();

exit 0;

# END, subs follow...

sub autogw($) {
    my $interface=$_[0];

    my @ip=`/sbin/ip route list`;
    if (my @default=grep /^default\s.*\bdev\s+$interface\b/, @ip) {
        if (@default > 1) {
            logger "Multiple default routes detected on $interface!?";
            return -1;
        }

        if ($default[0]=/\bvia\s+\(\S+\)\b/) {
            $gwcache{$interface}=$1;
            return $1;
        }
    }

    if (exists($gwcache{$interface}) and defined($gwcache{$interface})) {
        logger "Using cached gateway $gwcache{$interface} for $interface.";
        return $gwcache{$interface};
    }

    logger "Failed to determine default route for $interface.";
    return -1;
}

sub gateway($) {
    my $interface=$_[0];

    if (exists($conf{'interface'}->{$interface}->{'gateway'})
        and defined($conf{'interface'}->{$interface}->{'gateway'})) {
        if ($conf{'interface'}->{$interface}->{'gateway'}
            =~ /^(?:1|auto|yes|true)$/i) {
            return autogw($interface);
        } else {
            return $conf{'interface'}->{$interface}->{'gateway'};
        }
    } elsif (exists($conf{'interface'}->{$interface}->{'monitor'}->{'gateway'})
        and defined($conf{'interface'}->{$interface}->{'monitor'}->{'gateway'})
        and $conf{'interface'}->{$interface}->{'monitor'}->{'gateway'}) {
        if ($conf{'interface'}->{$interface}->{'monitor'}->{'gateway'}
            =~ /^(?:1|yes|true)$/i) {
            return autogw($interface);
        } else {
            return $conf{'interface'}->{$interface}->{'monitor'}->{'gateway'};
        }
    } else {
        autogw($interface);
    }
}

sub ip_cached($) {
    my $host=shift;

    my $n=inet_aton($host);

    if (defined($n)) {
        my $ip=inet_ntoa($n);

        if (defined($ip)) {
            $ipcache{$host}=$ip;
            return $ip;
        }

        logger "inet_ntoa() failed!";
        $n=undef;
    }

    if (!defined($n)) {
        logger "Lookup failed on '$host'.";

        return $ipcache{$host} if (exists($ipcache{$host}));

        return undef;
    }
}

sub my_system(@) {
    my @command=@_;

    my $ret=system(@command);

    # More-or-less straight from perlfunc(1).
    if ($ret == -1) {
        logger "Failed to execute '@command'";
    } elsif ($ret & 127) {
        logger sprintf("Child '@command' died with signal %d.",  ($ret & 127));
        logger "Core dumped." if ($ret & 128);
    } elsif ($ret != 0) {
        logger sprintf("Child '@command' exited with value %d", $ret >> 8);
    }

    return(($ret == 0) & 1);

}

sub route_del($$) {
    my ($interface, $ip)=@_;

    my $gw=gateway($interface);

    return 1 if ($gw eq $ip);

    #logger "Removing static route to $ip via $gw on $interface...";

    # FIXME - Not correct at all.
    my_system("/sbin/ip", "route", "del", $ip, "via", $gw);
}

sub route_add($$) {
    my ($interface, $ip)=@_;

    my $gw=gateway($interface);

    return 1 if ($gw eq $ip);

    #logger "Adding static route to $ip via $gw on $interface...";

    # FIXME - Not correct at all.
    my_system("/sbin/ip", "route", "add", $ip, "via", $gw);
}

sub calc_sleeptime($) {
    my $min=$_[0];

    return ($min > $sleeptime ? $min : $sleeptime) if (defined($sleeptime));

    my @val=($conf{'interval'});

    for my $interface (keys(%{$conf{'interface'}})) {
        push(@val, $conf{'interface'}->{$interface}->{'monitor'}->{'interval'})
            if (exists($conf{'interface'}->{$interface}->{'monitor'})
            and exists($conf{'interface'}->{$interface}->{'monitor'}->{'interval'}));
    }

    my $gcd;
    if (@val == 1) {
        $gcd=$val[0];
    } else {
        $gcd=Math::BigInt::bgcd(@val);
    }

    return ($min > $gcd ? $min : $gcd);
}

sub gwping($) {
    my $interface=$_[0];

    return -1 unless
        (exists($conf{'interface'}->{$interface}->{'monitor'}->{'gateway'})
        and defined($conf{'interface'}->{$interface}->{'monitor'}->{'gateway'})
        and $conf{'interface'}->{$interface}->{'monitor'}->{'gateway'});

    my $gw=gateway($interface);

    return -1 unless $gw;

    # Try 5 times before giving up.
    for (my $n=0;$n<5;$n++) {
        my $ret=ping($interface, $gw);

        return $ret unless ($ret == 0);
    }

    return 0;
}

sub ping_test($) {
    my $interface=$_[0];

    return -1 unless
        (exists($conf{'interface'}->{$interface}->{'monitor'}->{'ping'})
        and @{$conf{'interface'}->{$interface}->{'monitor'}->{'ping'}});

    return ping($interface,
        shuffle(@{$conf{'interface'}->{$interface}->{'monitor'}->{'ping'}}));
}

sub connect_test($) {
    my $interface=$_[0];

    return -1 unless
        (exists($conf{'interface'}->{$interface}->{'monitor'}->{'connect'})
        and @{$conf{'interface'}->{$interface}->{'monitor'}->{'connect'}});

    return _connect($interface,
        shuffle(@{$conf{'interface'}->{$interface}->{'monitor'}->{'connect'}}));
}

sub check_status() {
    for my $interface (keys(%{$conf{'interface'}})) {
        next unless (exists($conf{'interface'}->{$interface}->{'monitor'})
            and defined($conf{'interface'}->{$interface}->{'monitor'}));

        my $interval=$conf{'interval'};

        $interval=$conf{'interface'}->{$interface}->{'monitor'}->{'interval'}
            if (exists($conf{'interface'}->{$interface}->{'monitor'}->{'interval'}));

        next if (exists($checktime{$interface})
            and (time - $checktime{$interface} < $interval));

        logger "Checking status of $interface.";

        # Assume the connection was up if this is the first time we're checking.
        $status{$interface}='UP' if (!exists($status{$interface}));

        # Assume the connection is up unless our tests fail.
        # Also assumes the connection is up if we have no tests defined.
        my $current='UP';

        my $reason="OK:";

        # Check link status.
        my $link=linkstatus($interface);
        if ($link == 0) {
            $current='DOWN';
            $reason='No link.';
        } elsif ($link == 1) {
            $reason.=" link";
        }

        # Ping the gateway.
        if ($current eq "UP") {
            my $gw=gwping($interface);
            if ($gw == 0) {
                $current='DOWN';
                $reason='Failed to ping gateway.';
            } elsif ($gw == 1) {
                $reason.=" gateway";
            }
        }

        if ($current eq 'UP') {
            my $pingtest=ping_test($interface);
            my $connecttest=-1;
            $connecttest=connect_test($interface) unless ($pingtest == 1);

            if (($pingtest == 0 and $connecttest == 0)
                or ($pingtest == -1 and $connecttest == 0)
                or ($pingtest == 0 and $connecttest == -1)) {
                $current='DOWN';
                $reason="Ping/connect tests failed.";
            } elsif ($pingtest == 1) {
                $reason.=" ping";
            } elsif ($connecttest == 1) {
                $reason.=" connect";
            }
        }

        if ($current ne $status{$interface}) {
            notify($interface, $current, $reason);
            $status{$interface}=$current;
        }

        $checktime{$interface}=time;
    }
}

sub prenotify() {
    # These environment variables will always be set for children.
    $ENV{'WANFAILD_FROM'}=$conf{'mailfrom'};
    $ENV{'WANFAILD_ADMIN'}=$conf{'admin'};
    $ENV{'WANFAILD_MAILHOST'}=$conf{'mailhost'};

    1;
}

sub notify($$$) {
    my ($interface, $state, $reason)=@_;

    my $handler;

    if ($state eq "UP") {
        $handler='onresume';
    } elsif ($state eq "DOWN") {
        $handler='onfail';
    } else {
        logger "notify() called with unknown state '$state'!";
        return 0;
    }

    logger "Interface $interface now $state - $reason";

    if ($conf{'interface'}->{$interface}->{$handler}) {
        # Set environment variables related to this event.
        $ENV{'WANFAILD_INTERFACE'}=$interface;
        $ENV{'WANFAILD_STATE'}=$state;
        $ENV{'WANFAILD_REASON'}=$reason;

        # Do something useful.
        for my $action (@{$conf{'interface'}->{$interface}->{$handler}}) {
            my $f=fork();

            if ($f == 0) {
                # In the child.
                if (!exec($action)) {
                    logger "Failed to run '$action': $!";
                    exit 1;
                }
            } elsif (!defined($f)) {
                logger "fork() failed trying to run '$action': $!";
            }
        }

        # Clean up.
        delete $ENV{'WANFAILD_INTERFACE'};
        delete $ENV{'WANFAILD_STATE'};
        delete $ENV{'WANFAILD_REASON'};
    }
}

sub hup() {
    #logger "Trying to execute '@args'...";
    if (!exec(@args)) {
        logger "Restart failed: $!";
        cleanup();
        exit 1;
    }
}

# Trap some signals.
sub trap_signals() {
    # Try to restart on SIGHUP, or die if we fail.
    $SIG{'HUP'}=\&hup;
    # That only seems to work once?
    # Workaround from perlipc(1):
    my $sigset = POSIX::SigSet->new();
    my $action = POSIX::SigAction->new('hup',
                                       $sigset,
                                       &POSIX::SA_NODEFER);
    POSIX::sigaction(&POSIX::SIGHUP, $action);

    # SIGINT, SIGQUIT, and SIGTERM all cause a clean exit.
    $SIG{'INT'}=sub { $done++; };
    $SIG{'QUIT'}=sub { $done++; };
    $SIG{'TERM'}=sub { $done++; };

    # SIGALRM tells us we need to check status.
    $SIG{'ALRM'}=sub { $alarm++ unless $testing; };

    # We don't really care about exit values from children.
    # This is straight from perlfunc(1).
    $SIG{'CHLD'}=sub {
            my $kid;
            do {
                $kid=waitpid(-1, WNOHANG);
            } while ($kid > 0);
        };
}

sub cleanup() {
    if (defined($pidfile)) {
        unlink($pidfile) or logger "Failed to unlink $pidfile: $!";
    }

    closelog() if ($conf{'syslog'});
}

sub writepid($) {
    my $file=$_[0];

    if (-f $file) {
        # Try to clean up stale pid files.
        my $fh=new FileHandle $file, O_RDONLY;

        if (!$fh) {
            logger "Failed to read stale pid file '$file': $!";
            return 0;
        }

        my $pid=<$fh>;

        $fh->close();

        $pid+=0; # Make sure it's numeric.

        if ($pid) {
            if (kill(0, $pid)) {
                logger "Process $pid still active.";
                return 0;
            } else {
                logger "Cleaning up stale pid file '$file' from PID $pid.";
                if (!unlink($file)) {
                    logger "unlink() failed: $!";
                    return 0;
                }
            }
        } else {
            logger "Failed to read pid from stale pid file '$file'.";
            return 0;
        }
    }

    my $fh=new FileHandle $file, O_WRONLY|O_CREAT|O_EXCL;

    if (!$fh) {
        logger "Failed to open $file for writing: $!";
        return 0;
    }

    unless (print $fh "$$\n" and $fh->close()) {
        logger "Failed to write to $file: $!";
        return 0;
    }

    return 1;
}

sub logger(@) {
    if ($conf{'syslog'}) {
        syslog(LOG_NOTICE, @_);
    }

    if (-t STDERR or !$conf{'syslog'}) {
        if (@_ > 1) {
            warn sprintf($_[0], @_[1..$#_]) . "\n";
        } else {
            warn @_, "\n";
        }
    }
}

sub linkstatus($) {
    my $interface=$_[0];

    return -1 unless
        (exists($conf{'interface'}->{$interface}->{'monitor'}->{'linkstatus'})
            and $conf{'interface'}->{$interface}->{'monitor'}->{'linkstatus'});

    # FIXME - OK, this is a cop-out way of doing this,
    # but it is all I have at the moment.
    my $ethtool_cmd='/sbin/ethtool ' . $interface . ' 2>&1';
    my @ethtool=`$ethtool_cmd`;

    if (my $state=(grep /^\s*Link\sdetected:\s+(yes|no)$/, @ethtool)[0]) {
        if ($state =~ /^\s*Link\sdetected:\s+yes$/) {
            logger "$interface link UP";
            return 1;
        } else {
            logger "$interface link DOWN";
            return 0;
        }
    } else {
        logger "Failed to determine link state for $interface.";
        logger @ethtool if (@ethtool);

        return -1;
    }
}

sub _connect($@) {
    my $interface=shift;

    my $retval=0;

    for my $host_and_port (@_) {
        my ($host,$port);

        if ($host_and_port =~ /^([^:]+):([^:]+)$/) {
            $host=$1;
            $port=$2;

            if ($port =~ /\D/) {
                $port=getservbyname($port, 'tcp');
                logger "Invalid host/port '$host_and_port', skipping.";
                $retval=-1;
                next;
            }
        } else {
            logger "Failed to parse host and port '$host_and_port', skipping.";
            $retval=-1;
            next;
        }

        my $ip=ip_cached($host);

        if (!$ip) {
            logger "Skipping failed host '$host'.";
            $retval=-1;
            next;
        }

        my $iaddr=inet_aton($ip);
        if (!$iaddr) {
            logger "inet_aton($ip) failed: $!";
            $retval=-1;
            next;
        }

        my $paddr=sockaddr_in($port, $iaddr);
        if (!$paddr) {
            logger "sockaddr_in($port, $host) failed: $!";
            $retval=-1;
            next;
        }

        my $proto=getprotobyname('tcp');
        if (!$proto) {
            logger "getprotobyname('tcp') failed: $!";
            $retval=-1;
            next;
        }

        route_add($interface, $ip);

        # FIXME - This should be converted to IO::Socket.
        # FIXME - We also should be setting a source address here, right?
        if (!socket(SOCK, PF_INET, SOCK_STREAM, $proto)) {
            route_del($interface, $ip);
            logger "socket() failed: $!";
            $retval=-1;
            next;
        }

        $testing=1;
        alarm(5);
        if (connect(SOCK, $paddr)) {
            $testing=0;
            alarm(0);
            close(SOCK);
            logger "connect $host_and_port: SUCCESS";
            route_del($interface, $ip);
            return 1;
        } else {
            my $reason=$!;
            $reason="Timeout" if ($reason eq "Interrupted system call");
            $testing=0;
            alarm(0);
            logger "connect $host_and_port: FAIL ($reason)";
            route_del($interface, $ip);
            next;
        }
    }

    return $retval;
}

sub ping($@) {
    my $interface=shift;

    my $ping;
    
    eval { $ping=Net::Ping->new("icmp"); };

    if ($@) {
        logger $@;
        return -1;
    }

    if (!$ping) {
        logger "Net::Ping->new() failed: $!";
        return -1;
    }

    # FIXME - We should be setting the source address here.
    #$ping->bind($source) or warn "bind to $source failed: $!\n";

    my $retval=-1;

    for my $host (@_) {
        my $ip=ip_cached($host);

        if (!$ip) {
            logger "Skipping failed host '$host'.";
            next;
        }

        route_add($interface, $ip);
        if ($ping->ping($ip, 2)) {
            route_del($interface, $ip);
            logger "ping $host: SUCCESS";
            return 1;
        } else {
            route_del($interface, $ip);
            logger "ping $host: FAIL";
            $retval=0;
        }
    }

    return $retval;
}

sub load_config($) {
    my ($configfile)=@_;

    my $yml=YAML::Tiny->new();

    my $conf=$yml->read($configfile);

    die "Failed to read configuration file: $!\n" if (!defined($conf));
    die "Invalid configuration file!\n" if (!$conf->[0]);

    return %{$conf->[0]};
}

sub print_version() {
    print "$NAME version $VERSION\n";
    exit 0;
}

=head1 AUTHOR

Steven Pritchard <steve@kspei.com>

=cut
# vi: set ai et:
